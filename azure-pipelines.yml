trigger:
  branches:
    include:
      - refs/tags/release/*
      - master
pr:
  - master
  - releases/*

pool:
  vmImage: "ubuntu-latest"

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"

resources:
  repositories:
    - repository: self
      checkoutOptions:
        submodules: true

steps:
  - task: DotnetGlobalToolInstaller@0
    inputs:
      name: "minver-cli"
      versionSpec: "2.0.0"

  - task: PowerShell@2
    inputs:
      targetType: "inline"
      script: |
        $version = & minver -t release/ 2>$null
        Write-Host ("##vso[task.setvariable variable=MinVerVersion;]$version")

        $json = [ordered]@{ version = $version;  }
        $json  | ConvertTo-Json -depth 100 | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/version.json

        exit 0
      errorActionPreference: "continue"
      ignoreLASTEXITCODE: true
      pwsh: true

  - task: DotNetCoreCLI@2
    displayName: Dotnet Restore
    inputs:
      command: "restore"
      projects: "**/*.csproj"
      feedsToUse: "select"
      verbosityRestore: "Normal"
  - task: DotNetCoreCLI@2
    displayName: Dotnet Build
    inputs:
      command: "build"
      arguments: "-c $(buildConfiguration)"
      projects: "**/*.csproj"

  - task: DotNetCoreCLI@2
    displayName: Dotnet Test
    inputs:
      command: "test"
      projects: "**/*.csproj"

  - task: DotNetCoreCLI@2
    displayName: Dotnet Pack
    inputs:
      command: "pack"
      nobuild: true
      includesymbols: true
      includesource: false
      versioningScheme: "byEnvVar"
      versionEnvVar: "MinVerVersion"
      verbosityPack: "Normal"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

  - task: CopyFiles@2
    displayName: Copy Release Descriptors
    inputs:
      Contents: |
        '**/*.nupkg'
      TargetFolder: "$(Build.ArtifactStagingDirectory)"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "drop"
      publishLocation: "Container"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
